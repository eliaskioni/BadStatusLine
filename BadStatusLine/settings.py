"""
Django settings for BadStatusLine project.

Generated by 'django-admin startproject' using Django 1.10.5.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import os
import sys

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import dj_database_url
import structlog

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'u)2m6w7j(bhs#=@zy*#(p+l8m9@wv-5iz3a!lkyg04@$#1k3np'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]


# Application definition

DEFAULT_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
)


THIRD_PARTY_APPS = (
    'rest_framework',
)

LOCAL_APPS = (
    'core',
)

# maintain the given order, because we want the post-migrate signal for our local app('core')
# to run before those of 'django.contrib.admin', otherwise you'll get an error.
INSTALLED_APPS = LOCAL_APPS + DEFAULT_APPS + THIRD_PARTY_APPS

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'BadStatusLine.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'BadStatusLine.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.7/ref/settings/#databases
remote_postgres_db = "postgres://cuqudcmt:Vg5eVb81Lr7id29tRBE9VdHEzk_AbbJH@babar.elephantsql.com:5432/cuqudcmt"
DATABASES = {
    'default': dj_database_url.config(
        default=os.environ.get('DATABASE_URL', remote_postgres_db)
    )
}


# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
            'require_debug_false': {
                '()': 'django.utils.log.RequireDebugFalse'
            }
        },
    'handlers': {
        'sentry': {
            'level': 'ERROR',
            'class': 'raven.contrib.django.raven_compat.handlers.SentryHandler',
            'filters': ['require_debug_false'],
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
            'stream': sys.stdout
        },
    },
    'formatters': {
        'verbose': {
            'format': '%(asctime)s %(levelname)s module=%(module)s, '
            'process_id=%(process)d, %(message)s'
        }
    },
    'loggers': {
        'django.request': {
            'handlers': ['console', 'sentry'],
            'level': 'ERROR',
        },
        'celery': {
            'handlers': ['console', 'sentry'],
            'level': 'DEBUG',
            'propagate': True
        },
        'core': {
            'handlers': ['console', 'sentry'],
            'level': 'DEBUG',
            'propagate': True
        },
        'lib': {
            'handlers': ['console', 'sentry'],
            'level': 'DEBUG',
            'propagate': True
        },
    }
}

# Set up structured logging
structlog.configure(
    logger_factory=structlog.stdlib.LoggerFactory(),
)

# Africa's Talking Auth

AFRICAS_TALKING_API_KEY = os.environ.get('AFRICAS_TALKING_API_KEY',
                                         "313a53fa92f768aed158d6fefe2f6bd5549a53109182fa806b4729e561c1f017")
AFRICAS_TALKING_USERNAME = os.environ.get('AFRICAS_TALKING_USERNAME', "EliasKioni")

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Africa/Nairobi'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.7/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, 'static')

STATIC_URL = '/static/'

MEDIA_URL = '/media/'

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


LOGIN_URL = '/accounts/login/'
# LOGOUT_URL = '/'
LOGIN_REDIRECT_URL = '/api/send_message/'

remote_rabbitmq_url = "amqp://uflyhmms:7OSm_TST9U4B_8gPwnxXt-p_CGNgdbsp@hyena.rmq.cloudamqp.com/uflyhmms"
#****** Celery configuration ***************#
CELERY_BROKER_URL = os.environ.get('BROKER_URL', remote_rabbitmq_url)
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'